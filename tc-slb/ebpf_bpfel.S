
ebpf_bpfel.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <fixup_ip_checksum>:
       0:	r6 = r1
       1:	r0 = *(u16 *)skb[12]
       2:	if r0 != 2048 goto +33 <LBB0_2>
       3:	r0 = *(u32 *)skb[20]
       4:	r8 = r0
       5:	r0 = *(u16 *)skb[14]
       6:	r9 = r0
       7:	r0 = *(u32 *)skb[16]
       8:	r7 = r0
       9:	r7 += r9
      10:	r7 += r8
      11:	r0 = *(u32 *)skb[26]
      12:	r7 += r0
      13:	r0 = *(u32 *)skb[30]
      14:	r7 += r0
      15:	r1 = r7
      16:	r1 >>= 16
      17:	r7 &= 65535
      18:	r7 += r1
      19:	r1 = r7
      20:	r1 >>= 16
      21:	r7 &= 65535
      22:	r7 += r1
      23:	r1 = r7
      24:	r1 >>= 16
      25:	r7 += r1
      26:	r7 ^= -1
      27:	r7 = be16 r7
      28:	*(u16 *)(r10 - 2) = r7
      29:	r3 = r10
      30:	r3 += -2
      31:	r1 = r6
      32:	r2 = 24
      33:	r4 = 2
      34:	r5 = 0
      35:	call 9

0000000000000120 <LBB0_2>:
      36:	r0 = 0
      37:	exit

0000000000000130 <proxy_ipv4>:
      38:	r7 = r3
      39:	r9 = r2
      40:	r6 = r1
      41:	r1 = r9
      42:	r1 += 12
      43:	*(u64 *)(r10 - 40) = r1
      44:	*(u64 *)(r10 - 32) = r1
      45:	r1 = *(u16 *)(r7 + 0)
      46:	r1 = be16 r1
      47:	*(u64 *)(r10 - 24) = r1
      48:	r8 = r9
      49:	r8 += 16
      50:	*(u64 *)(r10 - 16) = r8
      51:	r1 = *(u16 *)(r7 + 2)
      52:	r1 = be16 r1
      53:	*(u64 *)(r10 - 8) = r1
      54:	r3 = r10
      55:	r3 += -32
      56:	r1 = 0 ll
      58:	r2 = 19
      59:	r4 = 32
      60:	call 177
      61:	r1 = r8
      62:	r2 = 4
      63:	r3 = 0 ll
      65:	r4 = 4
      66:	r5 = 0
      67:	call 28
      68:	r0 &= 65535
      69:	r1 = 19 ll
      71:	r2 = 24
      72:	r3 = r0
      73:	r4 = 24
      74:	call 6
      75:	r3 = *(u32 *)(r9 + 16)
      76:	r1 = 0 ll
      78:	r4 = *(u32 *)(r1 + 0)
      79:	r1 = r6
      80:	r2 = 50
      81:	r5 = 20
      82:	call 11
      83:	r1 = 0 ll
      85:	r1 = *(u32 *)(r1 + 0)
      86:	*(u32 *)(r9 + 16) = r1
      87:	r1 = 0 ll
      89:	r1 = *(u32 *)(r1 + 0)
      90:	*(u32 *)(r9 + 12) = r1
      91:	r0 = *(u16 *)skb[12]
      92:	if r0 != 2048 goto +36 <LBB1_2>
      93:	r0 = *(u32 *)skb[20]
      94:	*(u64 *)(r10 - 56) = r0
      95:	r0 = *(u16 *)skb[14]
      96:	*(u64 *)(r10 - 48) = r7
      97:	r7 = r0
      98:	r0 = *(u32 *)skb[16]
      99:	r9 = r0
     100:	r9 += r7
     101:	r7 = *(u64 *)(r10 - 48)
     102:	r1 = *(u64 *)(r10 - 56)
     103:	r9 += r1
     104:	r0 = *(u32 *)skb[26]
     105:	r9 += r0
     106:	r0 = *(u32 *)skb[30]
     107:	r9 += r0
     108:	r1 = r9
     109:	r1 >>= 16
     110:	r9 &= 65535
     111:	r9 += r1
     112:	r1 = r9
     113:	r1 >>= 16
     114:	r9 &= 65535
     115:	r9 += r1
     116:	r1 = r9
     117:	r1 >>= 16
     118:	r9 += r1
     119:	r9 ^= -1
     120:	r9 = be16 r9
     121:	*(u16 *)(r10 - 32) = r9
     122:	r3 = r10
     123:	r3 += -32
     124:	r1 = r6
     125:	r2 = 24
     126:	r4 = 2
     127:	r5 = 0
     128:	call 9

0000000000000408 <LBB1_2>:
     129:	r1 = *(u64 *)(r10 - 40)
     130:	*(u64 *)(r10 - 32) = r1
     131:	r1 = *(u16 *)(r7 + 0)
     132:	*(u64 *)(r10 - 16) = r8
     133:	r1 = be16 r1
     134:	*(u64 *)(r10 - 24) = r1
     135:	r1 = *(u16 *)(r7 + 2)
     136:	r1 = be16 r1
     137:	*(u64 *)(r10 - 8) = r1
     138:	r3 = r10
     139:	r3 += -32
     140:	r1 = 43 ll
     142:	r2 = 19
     143:	r4 = 32
     144:	call 177
     145:	r1 = 2
     146:	*(u32 *)(r10 - 32) = r1
     147:	r1 = 0 ll
     149:	r1 = *(u32 *)(r1 + 0)
     150:	*(u32 *)(r10 - 28) = r1
     151:	r1 = *(u32 *)(r6 + 40)
     152:	r2 = r10
     153:	r2 += -32
     154:	r3 = 20
     155:	r4 = 0
     156:	call 152
     157:	exit

00000000000004f0 <tc_process_ipv4>:
     158:	r6 = 0
     159:	r5 = *(u32 *)(r1 + 80)
     160:	r4 = *(u32 *)(r1 + 76)
     161:	r2 = r4
     162:	r2 += 14
     163:	if r2 > r5 goto +70 <LBB2_14>
     164:	r3 = *(u8 *)(r4 + 12)
     165:	r0 = *(u8 *)(r4 + 13)
     166:	r0 <<= 8
     167:	r0 |= r3
     168:	if r0 != 8 goto +65 <LBB2_14>
     169:	r3 = r4
     170:	r3 += 34
     171:	if r3 > r5 goto +62 <LBB2_14>
     172:	r0 = *(u8 *)(r4 + 23)
     173:	if r0 != 6 goto +60 <LBB2_14>
     174:	r0 = r4
     175:	r0 += 54
     176:	if r0 > r5 goto +57 <LBB2_14>
     177:	r5 = 0 ll
     179:	r5 = *(u32 *)(r5 + 0)
     180:	r0 = *(u32 *)(r4 + 30)
     181:	if r0 != r5 goto +8 <LBB2_8>
     182:	r5 = 0 ll
     184:	r5 = *(u16 *)(r5 + 0)
     185:	r0 = *(u16 *)(r4 + 36)
     186:	if r0 != r5 goto +3 <LBB2_8>
     187:	call -1
     188:	r6 = r0
     189:	goto +44 <LBB2_14>

00000000000005f0 <LBB2_8>:
     190:	r1 = r4
     191:	r1 += 26
     192:	r2 = 0 ll
     194:	r2 = *(u32 *)(r2 + 0)
     195:	r5 = *(u32 *)(r1 + 0)
     196:	if r5 != r2 goto +37 <LBB2_14>
     197:	r5 = r4
     198:	r5 += 30
     199:	r2 = *(u16 *)(r3 + 0)
     200:	r3 = 0 ll
     202:	r3 = *(u16 *)(r3 + 0)
     203:	if r2 != r3 goto +12 <LBB2_11>
     204:	*(u64 *)(r10 - 16) = r5
     205:	*(u64 *)(r10 - 32) = r1
     206:	r2 = be16 r2
     207:	*(u64 *)(r10 - 24) = r2
     208:	r1 = *(u16 *)(r4 + 36)
     209:	r1 = be16 r1
     210:	*(u64 *)(r10 - 8) = r1
     211:	r3 = r10
     212:	r3 += -32
     213:	r1 = 62 ll
     215:	goto +15 <LBB2_13>

00000000000006c0 <LBB2_11>:
     216:	r3 = 0 ll
     218:	r3 = *(u16 *)(r3 + 0)
     219:	if r2 != r3 goto +14 <LBB2_14>
     220:	*(u64 *)(r10 - 16) = r5
     221:	*(u64 *)(r10 - 32) = r1
     222:	r2 = be16 r2
     223:	*(u64 *)(r10 - 24) = r2
     224:	r1 = *(u16 *)(r4 + 36)
     225:	r1 = be16 r1
     226:	*(u64 *)(r10 - 8) = r1
     227:	r3 = r10
     228:	r3 += -32
     229:	r1 = 84 ll

0000000000000738 <LBB2_13>:
     231:	r2 = 22
     232:	r4 = 32
     233:	call 177

0000000000000750 <LBB2_14>:
     234:	r0 = r6
     235:	exit

Disassembly of section classifier/ingress:

0000000000000000 <tc_process>:
       0:	r0 = 0
       1:	r2 = *(u32 *)(r1 + 16)
       2:	if r2 != 8 goto +1 <LBB3_2>
       3:	call -1

0000000000000020 <LBB3_2>:
       4:	exit
