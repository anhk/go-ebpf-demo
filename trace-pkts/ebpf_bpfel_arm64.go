// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadEbpf returns the embedded CollectionSpec for ebpf.
func loadEbpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_EbpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ebpf: %w", err)
	}

	return spec, err
}

// loadEbpfObjects loads ebpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ebpfObjects
//	*ebpfPrograms
//	*ebpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEbpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEbpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ebpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfSpecs struct {
	ebpfProgramSpecs
	ebpfMapSpecs
}

// ebpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfProgramSpecs struct {
	K__netifReceiveSkb        *ebpf.ProgramSpec `ebpf:"k__netif_receive_skb"`
	K__netifReceiveSkbOneCore *ebpf.ProgramSpec `ebpf:"k__netif_receive_skb_one_core"`
	K_ipForward               *ebpf.ProgramSpec `ebpf:"k_ip_forward"`
	K_ipForwardFinish         *ebpf.ProgramSpec `ebpf:"k_ip_forward_finish"`
	K_ipRcvCore               *ebpf.ProgramSpec `ebpf:"k_ip_rcv_core"`
	K_ipRcvFinish             *ebpf.ProgramSpec `ebpf:"k_ip_rcv_finish"`
	K_netifReceiveSkbCore     *ebpf.ProgramSpec `ebpf:"k_netif_receive_skb_core"`
	K_tcpFilter               *ebpf.ProgramSpec `ebpf:"k_tcp_filter"`
	K_tcpV4DoRcv              *ebpf.ProgramSpec `ebpf:"k_tcp_v4_do_rcv"`
}

// ebpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfMapSpecs struct {
}

// ebpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfObjects struct {
	ebpfPrograms
	ebpfMaps
}

func (o *ebpfObjects) Close() error {
	return _EbpfClose(
		&o.ebpfPrograms,
		&o.ebpfMaps,
	)
}

// ebpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfMaps struct {
}

func (m *ebpfMaps) Close() error {
	return _EbpfClose()
}

// ebpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfPrograms struct {
	K__netifReceiveSkb        *ebpf.Program `ebpf:"k__netif_receive_skb"`
	K__netifReceiveSkbOneCore *ebpf.Program `ebpf:"k__netif_receive_skb_one_core"`
	K_ipForward               *ebpf.Program `ebpf:"k_ip_forward"`
	K_ipForwardFinish         *ebpf.Program `ebpf:"k_ip_forward_finish"`
	K_ipRcvCore               *ebpf.Program `ebpf:"k_ip_rcv_core"`
	K_ipRcvFinish             *ebpf.Program `ebpf:"k_ip_rcv_finish"`
	K_netifReceiveSkbCore     *ebpf.Program `ebpf:"k_netif_receive_skb_core"`
	K_tcpFilter               *ebpf.Program `ebpf:"k_tcp_filter"`
	K_tcpV4DoRcv              *ebpf.Program `ebpf:"k_tcp_v4_do_rcv"`
}

func (p *ebpfPrograms) Close() error {
	return _EbpfClose(
		p.K__netifReceiveSkb,
		p.K__netifReceiveSkbOneCore,
		p.K_ipForward,
		p.K_ipForwardFinish,
		p.K_ipRcvCore,
		p.K_ipRcvFinish,
		p.K_netifReceiveSkbCore,
		p.K_tcpFilter,
		p.K_tcpV4DoRcv,
	)
}

func _EbpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ebpf_bpfel_arm64.o
var _EbpfBytes []byte
